{"version":3,"sources":["reducers/reducer_weather.js","actions/action-types.js","reducers/index.js","actions/index.js","containers/search-bar.js","components/chart.js","components/google-map.js","containers/weather-list.js","components/app.js","components/error-indicator.js","components/error-boundry.js","index.js"],"names":["reducerWeather","state","arguments","length","undefined","_ref","type","payload","concat","Object","toConsumableArray","data","rootReducer","combineReducers","weather","ROOT_URL","fetchWeather","city","url","axios","get","SearchBar","term","onInputChange","e","_this","setState","target","value","onFormSubmit","preventDefault","props","this","react_default","a","createElement","className","onSubmit","placeholder","onChange","required","PropTypes","func","Component","defaultProps","connect","Chart","color","units","Fragment","build","svgWidth","svgHeight","_","round","sum","average","GoogleMap","mapRef","React","createRef","_this2","_this$props","lat","lng","window","google","maps","Map","current","zoom","center","ref","number","isRequired","WeatherList","renderWeather","cityData","list","temps","map","main","temp","humidity","_city$coord","coord","lon","key","id","google_map","population","chart","instanceOf","App","search_bar","weather_list","ErrorIndicatior","ErrorBoundry","hasError","children","error_indicator","node","createStoreWithMiddleWare","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducer","error_boundry_ErrorBoundry","app","document","getElementById"],"mappings":"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","file":"static/js/main.eda5ab20.chunk.js","sourcesContent":["import FETCH_WEATHER from '../actions/action-types';\n\nconst reducerWeather = (state = [], { type, payload }) => {\n  switch (type) {\n    case FETCH_WEATHER:\n      return [...state, payload.data];\n    default:\n      return state;\n  }\n};\n\nexport default reducerWeather;\n","const FETCH_WEATHER = 'FETCH_WEATHER';\n\nexport default FETCH_WEATHER;\n","import { combineReducers } from 'redux';\nimport reducerWeather from './reducer_weather';\n\nconst rootReducer = combineReducers({\n  weather: reducerWeather\n});\n\nexport default rootReducer;\n","import axios from 'axios';\nimport FETCH_WEATHER from './action-types';\n\nconst API_KEY = 'e720ab37b4103bd90f7848beba6372c3';\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n\nconst fetchWeather = city => {\n  const url = `${ROOT_URL}&q=${city},ua`;\n  const request = axios.get(url);\n  return {\n    type: FETCH_WEATHER,\n    payload: request\n  };\n};\n\nexport default fetchWeather;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport fetchWeather from '../actions';\n\nclass SearchBar extends Component {\n  state = {\n    term: ''\n  };\n\n  static get propTypes() {\n    return {\n      fetchWeather: PropTypes.func\n    };\n  }\n\n  onInputChange = e => {\n    this.setState({\n      term: e.target.value\n    });\n  };\n\n  onFormSubmit = e => {\n    e.preventDefault();\n    const { fetchWeather } = this.props;\n    const { term } = this.state;\n    fetchWeather(term);\n    this.setState({ term: '' });\n  };\n\n  render() {\n    const { term } = this.state;\n    return (\n      <form className=\"input-group\" onSubmit={this.onFormSubmit}>\n        <input\n          placeholder=\"Get a five-day forecast of Ukraine cities (write city in English)\"\n          className=\"form-control\"\n          value={term}\n          onChange={this.onInputChange}\n          required\n        />\n        <span className=\"input-group-btn\">\n          <button type=\"submit\" className=\"btn btn-secondary\">\n            Submit\n          </button>\n        </span>\n      </form>\n    );\n  }\n}\n\nSearchBar.defaultProps = {\n  fetchWeather: () => {}\n};\n\nconst mapStateToProps = ({ weather }) => {\n  return {\n    weather\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchWeather }\n)(SearchBar);\n","import React from 'react';\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nconst average = data => {\n  return _.round(_.sum(data) / data.length);\n};\n\nconst Chart = ({ data, color, units }) => {\n  return (\n    <React.Fragment>\n      <Sparklines data={data} svgWidth={250} svgHeight={100}>\n        <SparklinesLine color={color} />\n        <SparklinesReferenceLine type=\"avg\" />\n      </Sparklines>\n      <div>\n        {average(data)}\n\n        {units}\n      </div>\n    </React.Fragment>\n  );\n};\n\nChart.propTypes = {\n  data: PropTypes.instanceOf(Array),\n  color: PropTypes.string,\n  units: PropTypes.string\n};\nChart.defaultProps = {\n  data: [],\n  color: '',\n  units: ''\n};\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass GoogleMap extends Component {\n  mapRef = React.createRef();\n\n  static get propTypes() {\n    return {\n      lat: PropTypes.number.isRequired,\n      lng: PropTypes.number.isRequired\n    };\n  }\n\n  componentDidMount() {\n    let { lat, lng } = this.props;\n    lat = +lat;\n    lng = +lng;\n    (() =>\n      new window.google.maps.Map(this.mapRef.current, {\n        zoom: 11,\n        center: { lat, lng }\n      }))();\n  }\n\n  render() {\n    return <div ref={this.mapRef} />;\n  }\n}\n\nexport default GoogleMap;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport _ from 'lodash';\nimport Chart from '../components/chart';\nimport fetchWeather from '../actions';\nimport GoogleMap from '../components/google-map';\nimport '../main.css';\n\nclass WeatherList extends Component {\n  static get propTypes() {\n    return {\n      weather: PropTypes.instanceOf(Object),\n      fetchWeather: PropTypes.func\n    };\n  }\n\n  componentDidMount() {\n    const { fetchWeather } = this.props;\n    fetchWeather('Berdyansk');\n  }\n\n  renderWeather = cityData => {\n    const { city, list } = cityData;\n    const temps = _.map(list.map(weather => weather.main.temp), temp => temp - 273.15);\n    const humidity = list.map(weather => weather.main.humidity);\n    const { lon, lat } = city.coord;\n\n    return (\n      <tr key={city.id}>\n        <td>\n          <GoogleMap lng={lon} lat={lat} />\n        </td>\n        <td>{city.population}</td>\n        <td>\n          <Chart data={temps} units=\"°C\" color=\"#FF5733\" />\n        </td>\n        <td>\n          <Chart data={humidity} units=\"%\" color=\"#212F3C\" />\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    const { weather } = this.props;\n    return (\n      <table className=\"table table-hover\">\n        <thead>\n          <tr>\n            <th>City</th>\n            <th>Population</th>\n            <th>Temperature (°C)</th>\n            <th>Humidity (%)</th>\n          </tr>\n        </thead>\n        <tbody>{weather.map(this.renderWeather)}</tbody>\n      </table>\n    );\n  }\n}\n\nWeatherList.defaultProps = {\n  weather: [],\n  fetchWeather: () => {}\n};\n\nconst mapStateToProps = ({ weather }) => {\n  return { weather };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchWeather }\n)(WeatherList);\n","import React from 'react';\nimport SearchBar from '../containers/search-bar';\nimport WeatherList from '../containers/weather-list';\n\nconst App = _ => {\n  return (\n    <div className=\"App\">\n      <SearchBar />\n      <WeatherList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\n\nconst ErrorIndicatior = _ => {\n  return (\n    <div className=\"error-indicator\">\n      <p className=\"error-indicator__text\">\n        Probably there is no such city in the list or problems with network:(\n      </p>\n      <p className=\"error-indicator__text\">We will fix it as soon as possible 4 you :)</p>\n    </div>\n  );\n};\n\nexport default ErrorIndicatior;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ErrorIndicatior from './error-indicator';\n\nexport default class ErrorBoundry extends Component {\n  state = {\n    hasError: false\n  };\n\n  static get propTypes() {\n    return {\n      children: PropTypes.node.isRequired\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({\n      hasError: true\n    });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    const { children } = this.props;\n\n    if (hasError) return <ErrorIndicatior />;\n\n    return children;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport reducer from './reducers';\nimport App from './components/app';\nimport ErrorBoundry from './components/error-boundry';\n\nconst createStoreWithMiddleWare = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleWare(reducer)}>\n    <ErrorBoundry>\n      <App />\n    </ErrorBoundry>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}